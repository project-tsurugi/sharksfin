name: Sharksfin-CI

on: [push, pull_request]

jobs:
  Build:
    runs-on: [self-hosted, oltp, foedus]

    steps:
      - id: Begin
        name: Begin
        run: |
          echo "Begin ${GITHUB_WORKFLOW}/${GITHUB_JOB} hostname:$(hostname)"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - id: Install_FOEDUS
        name: Install_FOEDUS
        run: |
          cd third_party/foedus
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DGFLAGS_INTTYPES_FORMAT=C99 -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_Shirakami
        name: Install_Shirakami
        run: |
          cd third_party/shirakami
          ./bootstrap.sh
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON -DENABLE_SANITIZER=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: CMake_Build
        name: CMake_Build
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_FOEDUS_BRIDGE=ON -DENABLE_COVERAGE=ON -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/.local -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --target all --clean-first -- -j8

      - id: CTest
        name: CTest
        continue-on-error: false
        env:
          GTEST_OUTPUT: xml
          ASAN_OPTIONS: detect_stack_use_after_return=true
        run: |
          cd build
          ctest --verbose --timeout 100

      - id: Clang-Tidy
        name: Clang-Tidy
        run: |
          python tools/bin/run-clang-tidy.py -quiet -export-fixes=build/clang-tidy-fix.yaml -p build -extra-arg=-Wno-unknown-warning-option -header-filter=$(pwd)'/(include|memory|mock|foedus|examples)/.*\\.h$' $(pwd)'/(memory/src|mock/src|foedus/src|examples)/.*' 2>&1 | tee build/clang-tidy.log

      - id: Doxygen
        name: Doxygen
        run: |
          cd build
          make doxygen 2> >(tee doxygen-error.log)
          zip -q -r sharksfin-doxygen doxygen/html

      - id: Upload_Doxygen_HTML
        name: Upload_Doxygen_HTML
        uses: actions/upload-artifact@v2
        if: contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master')
        with:
          name: sharksfin-doxygen
          path: build/sharksfin-doxygen.zip

      - id: Gcovr
        name: Gcovr
        env:
          GCOVR_COMMON_OPTION: -e ../third_party/ -e ../.*/test.* -e ../.*/examples.* -e .*/antlr.*
        run: |
          cd build
          mkdir gcovr-xml gcovr-html
          gcovr -j4 -r .. --xml ${GCOVR_COMMON_OPTION} -o gcovr-xml/sharksfin-gcovr.xml
          gcovr -j4 -r .. --html --html-details --html-title "sharksfin coverage" ${GCOVR_COMMON_OPTION} -o gcovr-html/sharksfin-gcovr.html
          zip -q -r sharksfin-coverage-report gcovr-html

      - id: Upload_Gcovr_HTML
        name: Upload_Gcovr_HTML
        uses: actions/upload-artifact@v2
        if: contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master')
        with:
          name: sharksfin-coverage-report
          path: build/sharksfin-coverage-report.zip

      - id: Generate_Dependency_Graph
        name: Generate_Dependency_Graph
        run: |
          cd build
          cp ../cmake/CMakeGraphVizOptions.cmake .
          cmake --graphviz=dependency-graph/sharksfin.dot ..
          cd dependency-graph
          dot -T png sharksfin.dot -o sharksfin.png

      - id: Upload_Dependency_Graph
        name: Upload_Dependency_Graph
        uses: actions/upload-artifact@v2
        if: contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master')
        with:
          name: sharksfin-dependency-graph
          path: build/dependency-graph/sharksfin.png

      - id: Generate_Annotations
        name: Generate_Annotations
        uses: ./.github/actions/tsurugi-annotations-action
        if: always()
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}

      - id: Notify_Slack
        name: Notify_Slack
        uses: ./.github/actions/tsurugi-slack-action
        if: always() && (contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          kind: 'job-result'
          channel: 'tsurugi-dev'
          status: ${{ job.status }}
          step_context: ${{ toJson(steps) }}
          username: ${{ github.workflow }}
